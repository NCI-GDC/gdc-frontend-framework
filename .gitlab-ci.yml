# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
---
include:
  - project: nci-gdc/gitlab-templates
    ref: master
    file:
      - templates/global/full.yaml
      - templates/deployments/salt-service.yaml

.default_rules: &default_rules
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule" || $RUN_UI_TESTS_ONLY != "true"'

.services:
  allow_failure: true
  stage: deploy
  when: manual
  parallel:
    matrix:
      - DEPLOY_SERVICE_LIST: [ portal2 ]
  <<: *default_rules

stages:
  - .pre
  - test
  - build
  - unit
  - release
  - build_ui_tests_image
  - deploy
  - .trigger_ui_tests

image: docker.osdc.io/node:16-alpine3.15

variables:
  npm_config_registry: https://nexus.osdc.io/repository/npm-all/
  npm_config_cache: .npm
  DEPLOY_SERVICE_TAG: ${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}

workflow:
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        DEPLOY_SERVICE_TAG: ${CI_COMMIT_BRANCH}-${CI_COMMIT_TAG}
    - when: always

Install npm packages:
  stage: .pre
  script:
    - npm install npm@7
    - npm ci --cache .npm
  variables:
    npm_config_proxy: http://cloud-proxy:3128
    npm_config_https_proxy: http://cloud-proxy:3128
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - .npm/
    policy: push
  <<: *default_rules

Linting:
  stage: test
  before_script:
    - eslint -v || npm ci
  script:
    - npm run lint
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - .npm/
    policy: pull
  <<: *default_rules

Prettier Checks:
  stage: test
  before_script:
    - prettier -v || npm ci
  script:
    - npm run format:check
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - .npm/
    policy: pull
  <<: *default_rules

Build core and compile portal:
  stage: build
  before_script:
    - lerna -v || npm ci
  script:
    - cd ${CI_PROJECT_DIR}/packages/core
    - npm run build:clean
    - cd ${CI_PROJECT_DIR}/packages/sapien
    - npm run build:clean
    - cd ${CI_PROJECT_DIR}/packages/portal-proto
    - npm run compile
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths:
        - node_modules/
        - .npm/
      policy: pull
    - key: "Built-$CI_COMMIT_REF_SLUG"
      untracked: true
      paths:
        - node_modules/
        - .npm/
        - packages/
        - dist/
      policy: push
  <<: *default_rules

Run unit tests:
  stage: unit
  needs:
    - Build core and compile portal
  before_script:
    - jest -v || npm ci
  script:
    - npm run test:all
  retry: 2
  cache:
    - key: "Built-$CI_COMMIT_REF_SLUG"
      paths:
        - node_modules/
        - .npm/
        - packages/
        - dist/
      policy: pull
  <<: *default_rules

Build and push container:
  stage: release
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  before_script:
    - apk add bash
  script:
    - docker build --build-arg "NPM_REGISTRY=https://nexus.osdc.io/repository/npm-all/" --build-arg "BUILD_SHORT_SHA=$CI_COMMIT_SHORT_SHA" -t $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA} .
    - docker push $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA}
  <<: *default_rules

Push latest container:
  stage: release
  variables:
    GIT_STRATEGY: none
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  only:
    - master
  before_script:
    - apk add bash
  script:
    - docker pull $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA}
    - docker tag $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA} $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:latest
    - docker push $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:latest
  except:
    - schedules

Push tagged container:
  stage: release
  variables:
    GIT_STRATEGY: none
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  only:
    - tags
  before_script:
    - apk add bash
  script:
    - docker pull $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA}
    - docker tag $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA} $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:${CI_COMMIT_TAG}
    - docker push $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME:${CI_COMMIT_TAG}

Build UI tests Docker image:
  stage: build_ui_tests_image
  services:
    - docker:${DOCKER_VERSION}-dind
  tags:
    - dind
  image: docker:${DOCKER_VERSION}-dind
  script:
    - docker build -t $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME-holmes-py:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA} -f ./holmes-py/Dockerfile ./holmes-py
    - docker push $DOCKER_RELEASE_REGISTRY/ncigdc/$CI_PROJECT_NAME-holmes-py:$CI_COMMIT_REF_SLUG-${CI_COMMIT_SHORT_SHA}

.trigger_ui_tests:
  stage: .trigger_ui_tests
  trigger:
    include:
      - local: 'holmes-py/.gitlab-ci-holmes-py.yml'
    strategy: depend
  parallel:
    matrix:
      - BROWSER: ["headless chrome", "headless firefox", "headless safari"]

trigger_ui_tests_yellow:
  extends: .trigger_ui_tests
  stage: .trigger_ui_tests
  variables:
    APP_ENVIRONMENT: QA_YELLOW
  needs:
    - job: deploy_qa/uat
      artifacts: true
  rules:
    - if: '$DEPLOY_JOB_NAME == "deploy_qa/yellow"'
      allow_failure: true

trigger_ui_tests_uat:
  extends: .trigger_ui_tests
  stage: .trigger_ui_tests
  variables:
    APP_ENVIRONMENT: QA_UAT
  needs:
    - job: deploy_qa/uat
      artifacts: true
  rules:
    - if: '$DEPLOY_JOB_NAME == "deploy_qa/uat2"'
      allow_failure: true

trigger_ui_tests_scheduled:
  extends: .trigger_ui_tests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $RUN_UI_TESTS_ONLY == "true"'
      when: always
  parallel:
    matrix:
      - APP_ENVIRONMENT: ["QA_YELLOW", "QA_UAT"]
